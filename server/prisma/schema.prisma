generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AbilityElement {
  id             Int             @id @default(autoincrement())
  name           String?
  icon           String?
  effect         String?
  tag            String?
  damage         Decimal?
  healing        Decimal?
  debuff         Decimal?
  buff           Decimal?
  color          String?
  abilityPresets AbilityPreset[]
}

model AbilityPreset {
  id             Int            @id @default(autoincrement())
  power          Boolean?       @default(true)
  cost           Boolean?       @default(true)
  cooldown       Boolean?       @default(true)
  duration       Boolean?       @default(true)
  description    String?
  abilityRangeId Int
  abilityShapeId Int
  abilityTypeId  Int
  elementId      Int
  presetCoreId   Int
  range          AbilityRange   @relation(fields: [abilityRangeId], references: [id])
  shape          AbilityShape   @relation(fields: [abilityShapeId], references: [id])
  type           AbilityType    @relation(fields: [abilityTypeId], references: [id])
  element        AbilityElement @relation(fields: [elementId], references: [id], onDelete: Cascade)

  @@index([elementId])
  @@index([presetCoreId])
  @@index([abilityRangeId])
  @@index([abilityShapeId])
  @@index([abilityTypeId])
}

model AbilityRange {
  id              Int             @id @default(autoincrement())
  name            String
  description     String
  tag             String?
  additionalRange Boolean?
  abilityPreset   AbilityPreset[]
}

model AbilityShape {
  id             Int             @id @default(autoincrement())
  name           String?
  description    String?
  tag            String?
  additionalArea Boolean?
  abilityPresets AbilityPreset[]
}

model AbilityType {
  id             Int             @id @default(autoincrement())
  name           String?
  description    String?
  tag            String?
  abilityPresets AbilityPreset[]
}

model ArchetypeRange {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  effects     Effect[]
}

model ArchetypeRole {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  effects     Effect[]
}

model Item {
  id                    Int          @id @default(autoincrement())
  name                  String
  // locationId removed: locations are represented by ephemeral loot items
  // produced by a loot generator; Items no longer belong directly to Locations.
  containerId           Int?
  characterId           Int
  createdBy             Int?
  createdOn             DateTime?    @default(now())
  description           String?
  image                 String?
  itemEffectId          Int?
  itemTypeId            Int?
  lastUpdate            Int?
  quantity              Int?
  containerIndex        Int?
  isContainer           Boolean?     @default(false)
  capacity              Int?
  removable             Boolean?     @default(true)
  lockType              String?
  parentContainerItemId Int?
  RepresentedContainer  Container?   @relation("Container_ItemObject")
  equippedIn            Equipment[]
  character             Character    @relation(fields: [characterId], references: [id])
  Container             Container?   @relation("Container_Items", fields: [containerId], references: [id], onDelete: SetNull)
  itemEffect            Effect?      @relation(fields: [itemEffectId], references: [id])
  itemType              ItemType?    @relation(fields: [itemTypeId], references: [id])
  // Location relation removed
  ParentContainerItem   Item?        @relation("ParentContainer", fields: [parentContainerItemId], references: [id])
  ChildContainerItems   Item[]       @relation("ParentContainer")
  itemEffects           ItemEffect[]
  Reward                Reward[]

  @@unique([containerId, containerIndex])
  @@index([characterId], map: "Item_characterId_fkey")
  @@index([itemEffectId], map: "Item_itemEffectId_fkey")
  @@index([itemTypeId], map: "Item_itemTypeId_fkey")
  // locationId index removed
  @@index([containerId])
  @@index([parentContainerItemId], map: "Item_parentContainerItemId_fkey")
}

model ItemType {
  id          Int     @id @default(autoincrement())
  slot        Int?
  name        String
  description String?
  items       Item[]
}

model Creature {
  id                      Int                      @id @default(autoincrement())
  name                    String
  description             String?
  creatureToCreatureTypes CreatureToCreatureType[]
  creatureTypes           CreatureType[]           @relation("CreatureToCreatureType")
}

model CreatureType {
  id                      Int                      @id @default(autoincrement())
  name                    String                   @unique
  tag                     String
  description             String?
  creatureToCreatureTypes CreatureToCreatureType[]
  creatures               Creature[]               @relation("CreatureToCreatureType")
}

model CreatureToCreatureType {
  creatureId     Int
  creatureTypeId Int
  creature       Creature     @relation(fields: [creatureId], references: [id], onDelete: Cascade)
  creatureType   CreatureType @relation(fields: [creatureTypeId], references: [id], onDelete: Cascade)

  @@id([creatureId, creatureTypeId])
  @@index([creatureTypeId], map: "CreatureToCreatureType_creatureTypeId_fkey")
}

model Effect {
  id               Int             @id @default(autoincrement())
  description      String?
  operation        String?
  tags             String?
  archetypeRangeId Int?
  archetypeRoleId  Int?
  ArchetypeRange   ArchetypeRange? @relation(fields: [archetypeRangeId], references: [id])
  ArchetypeRole    ArchetypeRole?  @relation(fields: [archetypeRoleId], references: [id])
  Item             Item[]
  itemEffects      ItemEffect[]

  @@index([archetypeRangeId], map: "Effect_archetypeRangeId_fkey")
  @@index([archetypeRoleId], map: "Effect_archetypeRoleId_fkey")
}

model Race {
  id          Int         @id @default(autoincrement())
  name        String?
  description String?
  color       String?
  raceFolder  String?
  characters  Character[]
}

model Skill {
  id          Int        @id @default(autoincrement())
  name        String?
  descLong    String?
  descShort   String?
  characterId Int?
  Character   Character? @relation(fields: [characterId], references: [id])

  @@index([characterId], map: "Skill_characterId_fkey")
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  password       String
  displayName    String
  active         Boolean?        @default(true)
  subscribed     Boolean         @default(false)
  admin          Boolean         @default(false)
  characters     Character[]
  worldLocations WorldLocation[]
}

model Character {
  id                Int         @id @default(autoincrement())
  userId            Int
  raceId            Int
  active            Boolean     @default(false)
  name              String
  image             String?
  archetypeDistance Int?
  archetypeRole     Int?
  level             Int         @default(1)
  experience        Int         @default(0)
  adventureId       Int?
  adventure         Adventure?  @relation(fields: [adventureId], references: [id])
  race              Race        @relation(fields: [raceId], references: [id], onDelete: Cascade)
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  equipment         Equipment[]
  factions          Faction[]
  inventory         Item[]
  skills            Skill[]

  @@index([raceId])
  @@index([userId])
  @@index([adventureId], map: "Character_adventureId_fkey")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.MediumText
  expiresAt DateTime
}

model Adventure {
  id          Int         @id @default(autoincrement())
  startDate   DateTime?
  endDate     DateTime?
  seed        String
  description String?
  Character   Character[]
  factions    Faction[]
  locations   Location[]
  npcs        NPC[]
  Reward      Reward[]
}

model Reward {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  adventureId Int
  itemId      Int
  adventure   Adventure @relation(fields: [adventureId], references: [id])
  item        Item      @relation(fields: [itemId], references: [id])

  @@index([adventureId], map: "Reward_adventureId_fkey")
  @@index([itemId], map: "Reward_itemId_fkey")
}

model Location {
  id          Int         @id @default(autoincrement())
  name        String
  type        String
  description String?
  coordinates String?
  adventureId Int
  containers  Container[]
  entities    Entity[]
  adventure   Adventure   @relation(fields: [adventureId], references: [id])

  @@index([adventureId], map: "Location_adventureId_fkey")
}

model Entity {
  id         Int       @id @default(autoincrement())
  type       String
  health     Int
  locationId Int?
  name       String
  strength   Int
  location   Location? @relation(fields: [locationId], references: [id])

  @@index([locationId], map: "Entity_locationId_fkey")
}

model Container {
  id            Int           @id @default(autoincrement())
  name          String
  capacity      Int
  lockType      String?
  locationId    Int?
  characterId   Int?
  removable     Boolean       @default(true)
  itemId        Int?          @unique
  containerType ContainerType @default(BASIC)
  ItemObject    Item?         @relation("Container_ItemObject", fields: [itemId], references: [id], onDelete: Cascade)
  location      Location?     @relation(fields: [locationId], references: [id])
  items         Item[]        @relation("Container_Items")

  @@unique([characterId, name])
  @@index([locationId], map: "Container_locationId_fkey")
  @@index([characterId])
}

model Equipment {
  id          Int           @id @default(autoincrement())
  characterId Int
  slot        EquipmentSlot
  itemId      Int?
  createdOn   DateTime      @default(now())
  updatedOn   DateTime      @updatedAt
  Character   Character     @relation(fields: [characterId], references: [id], onDelete: Cascade)
  Item        Item?         @relation(fields: [itemId], references: [id])

  @@unique([characterId, slot])
  @@index([itemId])
}

model ItemEffect {
  id        Int      @id @default(autoincrement())
  itemId    Int
  effectId  Int?
  params    String?  @db.LongText
  createdOn DateTime @default(now())
  Effect    Effect?  @relation(fields: [effectId], references: [id])
  Item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@index([itemId])
  @@index([effectId], map: "ItemEffect_effectId_fkey")
}

model NPC {
  id          Int       @id @default(autoincrement())
  name        String
  role        String
  dialogue    String?
  adventureId Int
  factionId   Int?
  adventure   Adventure @relation(fields: [adventureId], references: [id])
  faction     Faction?  @relation(fields: [factionId], references: [id])

  @@index([adventureId], map: "NPC_adventureId_fkey")
  @@index([factionId], map: "NPC_factionId_fkey")
}

model Faction {
  id          Int        @id @default(autoincrement())
  name        String
  reputation  String
  objectives  String?
  adventureId Int
  characterId Int?
  adventure   Adventure  @relation(fields: [adventureId], references: [id])
  Character   Character? @relation(fields: [characterId], references: [id])
  npcs        NPC[]

  @@index([adventureId], map: "Faction_adventureId_fkey")
  @@index([characterId], map: "Faction_characterId_fkey")
}

model ArenaHistory {
  arena_history_id Int       @id @default(autoincrement())
  name             String
  seed             String
  size             Int
  created_on       DateTime  @default(now())
  last_updated     DateTime  @updatedAt
  last_active      DateTime?

  @@map("arena_history")
}

model WorldLocation {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  chunkX      Int
  chunkY      Int
  hexQ        Int
  hexR        Int
  type        WorldLocationType
  visible     Boolean           @default(true)
  ownerUserId Int?
  createdOn   DateTime          @default(now())
  updatedOn   DateTime          @updatedAt
  owner       User?             @relation(fields: [ownerUserId], references: [id])

  @@unique([chunkX, chunkY, hexQ, hexR])
  @@index([ownerUserId], map: "WorldLocation_ownerUserId_fkey")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Structure_backup {
  id          Int     @default(0)
  name        String
  type        String
  description String?
  locationId  Int

  @@ignore
}

enum ContainerType {
  BASIC
  LIQUID
  CONSUMABLES
  PACK
  POCKETS
}

enum EquipmentSlot {
  BACKPACK
  BELT
  BANDOLIER
  LEG
  HEAD
  CHEST
  HANDS
  FEET
  TRINKET1
  TRINKET2
}

enum WorldLocationType {
  TOWN
  DUNGEON
  QUEST
}
